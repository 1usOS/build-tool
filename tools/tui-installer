#!/bin/bash

#################################################################
#                    _     _      _                             #
#     /\            | |   | |    (_)                            #
#    /  \   _ __ ___| |__ | |     _ _ __  _   ___  __           #
#   / /\ \ | '__/ __| '_ \| |    | | '_ \| | | \ \/ /           #
#  / ____ \| | | (__| | | | |____| | | | | |_| |>  <            #
# /_/    \_\_|  \___|_| |_|______|_|_| |_|\__,_/_/\_\ __        #
#  _____           _        _ _           (  __)/  \(  _ \      #
# |_   _|         | |      | | |           ) _)(  O ))   /      #
#   | |  _ __  ___| |_ __ _| | | ___ _ __ (__)  \__/(__\_)      #
#   | | | '_ \/ __| __/ _` | | |/ _ \ '__|    /__\ (  _ \( \/ ) #
#  _| |_| | | \__ \ || (_| | | |  __/ |      /    \ )   // \/ \ #
# |_____|_| |_|___/\__\__,_|_|_|\___|_|      \_/\_/(__\_)\_)(_/ #
#                                                               #
#################################################################
# Version of this script 
# (For developer : Update whenever there is a change in this file or its related files)
# format of Version Number is YYMMDDN which N is 1-99 count on updates commited on the same day)
installerver=24030801

# Define main / dev branch
branch=dev

# Target Device for Installation
install_target="rock5"

################################################################
# Compiled Packages folder path
compiled_pkg_folder="/usr/lib/compiled-packages"

# Dialog Theme config file path
dialog_theme_config="/usr/lib/installer/dialog.conf"

# Pacman ParallelDownloads
prldownloads=30

# Language options
langopt=("Chinese" "English" "Spanish" "French" "German" "Arabic" "Others")

# Chinese
langchi=("cmn_TW (Taiwan)" "zh_CN (China)" "zh_HK (Hong Kong)" "zh_TW (Taiwan)" "zh_MO (Macau)" "zh_SG (Singapore)"  "zu_ZA (South Africa)" "yue_HK (Hong Kong)" "hak_TW (Taiwan)")

# English
langeng=("en_AG (Antigua and Barbuda)" "en_AU (Australia)" "en_BW (Botswana)" "en_CA (Canada)" "en_DK (Denmark)" "en_GB (United Kingdom)" "en_HK (Hong Kong)" "en_IE (Ireland)" "en_IL (Israel)" "en_IN (India)" "en_NG (Nigeria)" "en_NZ (New Zealand)" "en_PH (Philippines)" "en_SC (Seychelles)" "en_SG (Singapore)" "en_US (United States)" "en_ZA (South Africa)" "en_ZM (Zambia)" "en_ZW (Zimbabwe)")

# Spanish
langspa=("es_AR (Argentina)" "es_BO (Bolivia)" "es_CL (Chile)" "es_CO (Colombia)" "es_CR (Costa Rica)" "es_CU (Cuba)" "es_DO (Dominican Republic)" "es_EC (Ecuador)" "es_ES (Spain)" "es_GT (Guatemala)" "es_HN (Honduras)" "es_MX (Mexico)" "es_NI (Nicaragua)" "es_PA (Panama)" "es_PE (Peru)" "es_PR (Puerto Rico)" "es_PY (Paraguay)" "es_SV (El Salvador)" "es_US (United States)" "es_UY (Uruguay)" "es_VE (Venezuela)")

# French
langfre=("fr_BE (Belgium)" "fr_CA (Canada)" "fr_CH (Switzerland)" "fr_FR (France)" "fr_LU (Luxembourg)")

# German
langger=("de_AT (Austria)" "de_BE (Belgium)" "de_CH (Switzerland)" "de_DE (Germany)" "de_IT (Italy)" "de_LI (Liechtenstein)" "de_LU (Luxembourg)")

# Arabic
langara=("ar_AE (United Arab Emirates)" "ar_BH (Bahrain)" "ar_DZ (Algeria)" "ar_EG (Egypt)" "ar_IN (India)" "ar_IQ (Iraq)" "ar_JO (Jordan)" "ar_KW (Kuwait)" "ar_LB (Lebanon)" "ar_LY (Libya)" "ar_MA (Morocco)" "ar_OM (Oman)" "ar_QA (Qatar)" "ar_SA (Saudi Arabia)" "ar_SD (Sudan)" "ar_SS (South Sudan)" "ar_SY (Syria)" "ar_TN (Tunisia)" "ar_YE (Yemen)")

# Sort by Continent
langcon=("Asia" "Europe" "Americas" "Africa" "Others")

# Asia
langconas=("az_AZ (Azerbaijan)" "az_IR (Iran)" "as_IN (India)" "bhb_IN (India)" "bho_IN (India)" "bho_NP (Nepal)" "bo_CN (China)" "bo_IN (India)" "dz_BT (Bhutan)" "fa_IR (Iran)" "hi_IN (India)" "he_IL (Israel)" "id_ID (Indonesia)" "ja_JP (Japan)" "ka_GE (Georgia)" "kk_KZ (Kazakhstan)" "km_KH (Cambodia)" "kn_IN (India)" "ko_KR (Korea)" "th_TH (Thailand)" "ta_SG (Singapore)" "vi_VN (Vietnam)" "saq_KE (Kenya)" "ml_IN (India)" "ug_CN (China)" "or_IN (India)" "sw_KE (Kenya)" "ta_MY (Malaysia)" "ta_IN (India)" "brx_IN (India)" "pa_IN (India)" "ug_IR (Iran)" "pa_PK (Pakistan)" "ur_PK (Pakistan)")

# Europe
langconeu=("bg_BG (Bulgaria)" "ca_IT (Italy)" "ca_AD (Andorra)" "ca_ES (Spain)" "ast_ES (Spain)" "ca_FR (France)" "br_FR (France)" "oc_FR (France)" "cs_CZ (Czech Republic)" "csb_PL (Poland)" "da_DK (Denmark)" "dsb_DE (Germany)" "el_GR (Greece)" "el_CY (Cyprus)" "et_EE (Estonia)" "eu_ES (Spain)" "fi_FI (Finland)" "fur_IT (Italy)" "fy_NL (Netherlands)" "fy_DE (Germany)" "ga_IE (Ireland)" "gl_ES (Spain)" "hr_HR (Croatia)" "hsb_DE (Germany)" "ia_FR (France)" "is_IS (Iceland)" "it_CH (Switzerland)" "it_IT (Italy)" "lv_LV (Latvia)" "mk_MK (North Macedonia)" "mt_MT (Malta)" "nb_NO (Norway)" "nl_BE (Belgium)" "nl_NL (Netherlands)" "nn_NO (Norway)" "no_NO (Norway)" "pl_PL (Poland)" "pt_PT (Portugal)" "ro_RO (Romania)" "sk_SK (Slovakia)" "sl_SI (Slovenia)" "sq_AL (Albania)" "sv_FI (Finland)" "sv_SE (Sweden)" "tr_TR (Turkey)" "uk_UA (Ukraine)" "crh_UA (Ukraine)" "gd_GB (United Kingdom)" "gv_GB (United Kingdom)" "cy_GB (United Kingdom)" "se_NO (Norway)")

# Americas
langconam=("ayc_PE (Peru)" "qu_PE (Peru)" "chr_US (United States)" "iu_CA (Canada)" "pt_BR (Brazil)" "hif_FJ (Fiji)" "ik_CA (Canada)")

# Africa
langconaf=("aa_DJ (Djibouti)" "aa_ER (Eritrea)" "aa_ET (Ethiopia)" "ber_DZ (Algeria)" "ber_MA (Morocco)" "gez_ER (Eritrea)" "gez_ET (Ethiopia)" "am_ET (Ethiopia)" "kab_DZ (Algeria)" "sid_ET (Ethiopia)" "sn_ZW (Zimbabwe)" "so_SO (Somalia)" "shi_MA (Morocco)" "shi_Tfng_MA (Morocco)" "rw_RW (Rwanda)" "nso_ZA (South Africa)" "yo_NG (Nigeria)" "xog_UG (Uganda)")

# Others
langconother=("ru_RU (Russia)" "cv_RU (Russia)" "ta_LK (Sri Lanka)" "ak_GH (Ghana)" "si_LK (Sri Lanka)" "dv_MV (Maldives)" "uz_UZ (Uzbekistan)" "sr_RS (Serbia)" "tk_TM (Turkmenistan)" "bi_VU (Vanuatu)" "sw_TZ (Tanzania)" "ce_RU (Russia)" "sah_RU (Russia)" "sr_CS (Serbia and Montenegro)" "tg_TJ (Tajikistan)" "ps_AF (Afghanistan)" "me_ME (Montenegro)" "ckb_IQ (Iraq)" "be_BY (Belarus)" "kl_GL (Greenland)" "bs_BA (Bosnia and Herzegovina)" "ug_UZ (Uzbekistan)")

################################################################
# Tools for formatting / styling

# Define terminal color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;36m'
NC='\033[0m' # No Color

# Echo with colors
colorecho() {
    color="$1"
    text="$2"
    echo -e "${color}${text}${NC}"
}

title_string="Arch Linux Installer for ARM"

# Title Logo
titlelogo_string() {
    # Check if the argument count is provided
    if [ -z "$1" ]; then
        local count=8
    else
        local count=$1
    fi
    
    # Generate the linespacing string with the specified count of spaces
    local linespacing=$(printf "%${count}s")
    local logostring="$linespacing                   _     _      _                  \n$linespacing    /\            | |   | |    (_)                 \n$linespacing   /  \   _ __ ___| |__ | |     _ _ __  _   ___  __\n$linespacing  / /\ \ | '__/ __| '_ \| |    | | '_ \| | | \ \/ /\n$linespacing / ____ \| | | (__| | | | |____| | | | | |_| |>  < \n$linespacing/_/    \_\_|  \___|_| |_|______|_|_| |_|\__,_/_/\_\ __\n$linespacing _____           _        _ _           (  __)/  \(  _ \  \n$linespacing|_   _|         | |      | | |           ) _)(  O ))   /  \n$linespacing  | |  _ __  ___| |_ __ _| | | ___ _ __ (__)  \__/(__\_)\n$linespacing  | | | '_ \/ __| __/ _\` | | |/ _ \ '__|    /__\ (  _ \( \/ )\n$linespacing _| |_| | | \__ \ || (_| | | |  __/ |      /    \ )   // \/ \ \n$linespacing|_____|_| |_|___/\__\__,_|_|_|\___|_|      \_/\_/(__\_)\_)(_/\n$linespacing"
    # Echo the logo string
    echo "$logostring"
}

dash_string() {
    # Check if the argument count is provided
    if [ -z "$1" ]; then
        local count=80
    else
        local count=$1
    fi

    for ((i = 0; i < count; i++)); do
        echo -n "-"
    done
}

title() {
  clear
  text="$1"
  echo "$(dash_string)"
  colorecho "$BLUE" "$(titlelogo_string)"
  echo "$(dash_string)"
  if [ "$branch" = "dev" ]; then
    colorecho "$YELLOW" "You are running a development build installer. It is experimental and may not work properly."
  fi
}

################################################################
# CLI and TUI Menus and Functions

# TUI Theme (dialog)
create_dialog_theme() {
    sudo mkdir -p $(basename $dialog_theme_config)
    sudo tee "$dialog_theme_config" <<EOF
# Arch Linux Installer for ARM
# Run-time configuration theme for dialog
#
# Types of values:
#
# Number     -  <number>
# String     -  "string"
# Boolean    -  <ON|OFF>
# Attribute  -  (foreground,background,highlight?,underline?,reverse?)

# Screen color
screen_color = (WHITE,WHITE,ON)
# Shadow color
shadow_color = (BLUE,BLUE,OFF)
# Dialog box color
dialog_color = (BLACK,WHITE,ON)
# Dialog box border color
border_color = (BLUE,WHITE,OFF)
# Menu box border color
menubox_border_color = border_color
# Inactive button label color
button_label_inactive_color = (BLUE,WHITE,ON)
# Dialog box border2 color
border2_color = (BLUE,WHITE,ON)
EOF
    sudo chmod +x $dialog_theme_config
}

# CLI Select Menu
function select_option_cli {

    # little helpers for terminal print control and key input
    ESC=$( printf "\033")
    cursor_blink_on()  { printf "$ESC[?25h"; }
    cursor_blink_off() { printf "$ESC[?25l"; }
    cursor_to()        { printf "$ESC[$1;${2:-1}H"; }
    print_option()     { printf "   $1 "; }
    print_selected()   { printf "  $ESC[7m $1 $ESC[27m"; }
    get_cursor_row()   { IFS=';' read -sdR -p $'\E[6n' ROW COL; echo ${ROW#*[}; }
    key_input()        { read -s -n3 key 2>/dev/null >&2
                         if [[ $key = $ESC[A ]]; then echo up;    fi
                         if [[ $key = $ESC[B ]]; then echo down;  fi
                         if [[ $key = ""     ]]; then echo enter; fi; }

    # initially print empty new lines (scroll down if at bottom of screen)
    for opt; do printf "\n"; done

    # determine current screen position for overwriting the options
    local lastrow=`get_cursor_row`
    local startrow=$(($lastrow - $#))

    # ensure cursor and input echoing back on upon a ctrl+c during read -s
    trap "cursor_blink_on; stty echo; printf '\n'; exit" 2
    cursor_blink_off

    local selected=0
    while true; do
        # print options by overwriting the last lines
        local idx=0
        for opt; do
            cursor_to $(($startrow + $idx))
            if [ $idx -eq $selected ]; then
                print_selected "$opt"
            else
                print_option "$opt"
            fi
            ((idx++))
        done

        # user key control
        case `key_input` in
            enter) break;;
            up)    ((selected--));
                   if [ $selected -lt 0 ]; then selected=$(($# - 1)); fi;;
            down)  ((selected++));
                   if [ $selected -ge $# ]; then selected=0; fi;;
        esac
    done

    # cursor position back to normal
    cursor_to $lastrow
    printf "\n"
    cursor_blink_on

    return $selected
}

# TUI Select Menu
select_option() {

    export DIALOGRC=$dialog_theme_config
    local i=0
    print_option()     { echo "$1"; }

    # menu header
    if [ -n "$menu_header" ]; then
        dialog_title="$menu_header"
        menu_header=" - $menu_header"
    else
        dialog_title="Welcome to Arch Linux !"
    fi

    # menu option title
    if [ -z "$menu_option_title" ]; then
        menu_option_title="Select an option:"
    fi

    # Create options string for dialog
    declare -a options_string=()
    for opt; do
        options_string+=("$((i + 1))" "$(print_option "$opt")")
        ((i++))
    done

    # launch TUI using dialog
    choice=$(dialog --colors --backtitle " \Zu\Z4[$title_string$menu_header] "$'\t\t\t\t\t\t\t\t\t\t'"    12:00    "$'\t\t\t\t\t\t\t\t\t\t\t\t'"      [WiFi Connected] "  \
        --title " $dialog_title " --ok-label "Next" --nocancel \
        --menu "\n\Zb\Z4$(titlelogo_string) \n\n $menu_option_title \Zn" 25 80 0 "${options_string[@]}" \
    3>&1 1>&2 2>&3 3>&- # Swap stdout with stderr to capture returned dialog text
    )

    case $? in
    0)
        return $choice
        ;;
    1)
        colorecho "$RED" "Error: Menu Cancelled"
        exit 1
        ;;
    #255)
        #echo 'Closed menu without choice'
        #;;
    *)
        select_option_cli "$@"
        ;;
    esac
}

################################################################
# Internet Connection & Updates Check

check_internet() {
    servers=("google.com" "1.1.1.1" "114.114.114.114") # ping Google, Cloudflare and China Mobile DNS (for China users)
    #servers=("invalid.example") # debug test case: simulate no internet 
    #servers=("0.0.0.0") # debug test case: bypass internet
    internet_available=false
        for server in "${servers[@]}"; do
            if ping -q -c 3 "$server" >/dev/null 2>&1; then
                colorecho "$GREEN" "\n Internet is available via $server."
                internet_available=true

                return 0
            else
                return -1
            fi
        done
}

network_option() {
    colorecho "$GREEN" "Network Option:"

    # Check if there is a Wireless Interface and get the first one
    for dev in /sys/class/net/*; do
        if [ -e "$dev"/wireless ]; then
            iwdev=${dev##*/};
            break;
        fi
    done
    # Check one more time since driver maybe not yet loaded
    if [ -z "$iwdev" ]; then
        sleep 3
        for dev in /sys/class/net/*; do
            if [ -e "$dev"/wireless ]; then
                iwdev=${dev##*/};
                break;
            fi
        done
    fi

    if [ -z "$iwdev" ]; then
        echo "Press 'w' to connect to a WiFi network (No wireless interface found)"
    else
        echo "Press 'w' to connect to a WiFi network ($iwdev)"
    fi

    echo "Press 's' to skip internet Check (installation may fail)"
    if [ -x "$(command -v sudo)" ]; then
        echo "Press 'p' to configure pacman ParallelDownloads (current value: $prldownloads)"
    fi
    colorecho "$YELLOW" "Waiting for internet connection..."

    # Set terminal to non-blocking mode to read single keypress
    stty -echo raw

    # Initialize variables
    keypress=''
    last_check=$(date +%s)

    while [ "$keypress" = '' ]; do
        # Check if it's time to perform internet check
        current_time=$(date +%s)
        if [ $((current_time - last_check)) -ge 3 ]; then
            # Check internet connectivity in the background
            if check_internet; then
                netsus=1
                break
            fi
            last_check=$current_time
        fi

        # Read single keypress with timeout
        read -t 0.1 -n 1 keypress
    done

    # Restore terminal settings
    stty echo -raw

    case $keypress in
        [wW])
            echo "Connecting to a WiFi network..."
            if [ -z "$iwdev" ]; then
                read -p "Please specify the network device (e.g. wlan0): " iwdev
            fi
            if [ -x "$(command -v sudo)" ]; then
                sudo wifi-menu $iwdev
            else
                wifi-menu $iwdev
            fi               
             # NTP Sync for WiFi
                if ip link show | grep "state UP" | grep -q "wl" >/dev/null 2>&1; then
                    colorecho "$GREEN" "Updating NTP Time Sync ..."
                    if [ -x "$(command -v sudo)" ]; then
                        sudo rm -rf /etc/systemd/network/*
                        sudo systemctl restart systemd-networkd
                        sleep 1
                        sudo timedatectl set-ntp false
                        sudo timedatectl set-ntp true
                    else
                        rm -rf /etc/systemd/network/*
                        systemctl restart systemd-networkd
                        sleep 1
                        timedatectl set-ntp false
                        timedatectl set-ntp true
                    fi
                fi
            
            ;;
        [pP])
            if [ -x "$(command -v sudo)" ]; then
                read -p "Enter a value to set pacman ParallelDownloads to (current value: $prldownloads): " prldownloads
                network_option
            else
                echo "Invalid choice."
                network_option
            fi
            ;;
        [sS])
            echo "Skipping internet Check"
            ;;
        *)
            if [ -z "$netsus" ]; then
                echo "Invalid choice."
                network_option
            fi
            ;;
    esac
}

# Check Installer Updates
check_installer_updates() {
    colorecho "$YELLOW" "Checking for installer updates..."
    remote_installerver=$(curl -s "https://raw.githubusercontent.com/kwankiu/archlinux-installer-rock5/$branch/tools/tui-installer" | grep -o 'installerver=[0-9]*' | cut -d= -f2)
    if [ "$remote_installerver" -gt "$installerver" ]; then
        # CLI
        colorecho "$GREEN" "A newer version ($remote_installerver) of this installer is available, do you want to update this installer?"
        # TUI
        menu_header="Installer Updates Available"
        menu_option_title="\Z3A newer version ($remote_installerver) of this installer is available, do you want to update this installer?\Zn"

        options=("Update this Installer" "Do not update this installer")
        select_option "${options[@]}"
        answer=$?
        if [ "$answer" = 0 ]; then
            # Download Installer
            colorecho "$GREEN" "Downloading Installer ..."
            curl -LJO https://raw.githubusercontent.com/kwankiu/archlinux-installer-rock5/$branch/tools/tui-installer

            # Update tui-installer
            colorecho "$GREEN" "Updating Installer ..."
            # Check if the script is being run with root privileges
            if [ $(id -u) -eq 0 ]; then
                # If running as root
                sed -i "s/install_target=\"rock5\"/install_target=\"$install_target\"/g" tui-installer
                chmod +x tui-installer
                cp -r tui-installer /usr/bin/installer
                rm -rf tui-installer
                colorecho "$GREEN" "Installer updated. System will reboot now."
                if ! reboot --force; then
                    echo "Unable to reboot automatically, please reboot your device manually."
                fi
            else
                # If not running as root
                sudo sed -i "s/install_target=\"rock5\"/install_target=\"$install_target\"/g" tui-installer
                sudo chmod +x tui-installer
                sudo cp -r tui-installer /usr/bin/installer
                sudo rm -rf tui-installer
                colorecho "$GREEN" "Installer updated. System will reboot now."
                if ! sudo reboot; then
                    echo "Unable to reboot automatically, please reboot your device manually."
                fi
            fi
        fi
    fi
}

################################################################
# Installer Menu
installer_menu() {

    # Choose Language
    menu_header="Language"
    menu_option_title="\Zb          Let's begin with setting up your language, is that right?\Zn\n\nSuggested Languages:"
    options=("English (Canada)" "French (Canada)" "More Languages")
    select_option "${options[@]}"
    selected=$?

    case $selected in
    *)
        clear
        echo "Coming Soon"
        exit 0
        ;;
    esac

    #if dialog --yesno  "Locate File? " 10 25; then
        #dialog --title "fselect" --fselect ~/Documents/GitHub/ 15 80
    #fi

}

################################################################
# Main Code

title

# Pre-init : install compiled packages
if [ -e $compiled_pkg_folder ]; then 
    if [ ! "$1" = "--skip-install-pkg" ]; then
        colorecho "$GREEN" "Installing Required Packages ..."
        if yes y | pacman -U $compiled_pkg_folder/*.pkg.tar.* --needed; then

            echo "Removing packages archives ..."
            rm -rf $compiled_pkg_folder

            # Ensure SSL (Sync Clock)
            colorecho "$GREEN" "Enabling Time Sync ..."
            systemctl enable systemd-timesyncd

            colorecho "$GREEN" "System will reboot now."
            if ! reboot --force; then
                echo "Unable to reboot automatically, please reboot your device manually."
            fi 
        else
            colorecho "$RED" "Failed to install Required Packages. The image may be broken, try flashing the image again."
            sleep 5
            exit 1
        fi
    fi
fi

# Network option menu
network_option
# Check Updates
check_installer_updates
# Run init setup if not yet done
if [ ! -e "/usr/bin/acu" ] && [ ! "$1" = "--skip" ]; then
        init_setup
fi

# Check if the script is being run with root privileges
if [[ $EUID -ne 0 ]]; then
    title
    colorecho "$GREEN" "Starting TUI Installer ..."
else
    colorecho "$RED" "Error : Installer must be run as user"
    exit 1
fi

# Welcome Menu
menu_header=""
menu_option_title=""
options=("Install Arch Linux" "Try Arch Linux (GUI)" "Exit Installer")
select_option "${options[@]}"
selected=$?

case $selected in
  1)
    installer_menu
    #start_installation
    ;;
  2)
    clear
    echo "Coming Soon"
    exit 0
    ;;
  *)
    clear
    echo "Exit Installer"
    exit 0
    ;;
esac

#if dialog --yesno  "Locate File? " 10 25; then
    #dialog --title "fselect" --fselect ~/Documents/GitHub/ 15 80
#fi
################################################################