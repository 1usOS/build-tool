#!/bin/bash

################################################################
#                                                              #
#                     Arch Rock Installer                      #
#                                                              #
################################################################
# Define main / dev branch
branch=dev

################################################################
# Tools for formatting / styling

# Define terminal color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;36m'
NC='\033[0m' # No Color

# Option Picker
function select_option {

    # little helpers for terminal print control and key input
    ESC=$( printf "\033")
    cursor_blink_on()  { printf "$ESC[?25h"; }
    cursor_blink_off() { printf "$ESC[?25l"; }
    cursor_to()        { printf "$ESC[$1;${2:-1}H"; }
    print_option()     { printf "   $1 "; }
    print_selected()   { printf "  $ESC[7m $1 $ESC[27m"; }
    get_cursor_row()   { IFS=';' read -sdR -p $'\E[6n' ROW COL; echo ${ROW#*[}; }
    key_input()        { read -s -n3 key 2>/dev/null >&2
                         if [[ $key = $ESC[A ]]; then echo up;    fi
                         if [[ $key = $ESC[B ]]; then echo down;  fi
                         if [[ $key = ""     ]]; then echo enter; fi; }

    # initially print empty new lines (scroll down if at bottom of screen)
    for opt; do printf "\n"; done

    # determine current screen position for overwriting the options
    local lastrow=`get_cursor_row`
    local startrow=$(($lastrow - $#))

    # ensure cursor and input echoing back on upon a ctrl+c during read -s
    trap "cursor_blink_on; stty echo; printf '\n'; exit" 2
    cursor_blink_off

    local selected=0
    while true; do
        # print options by overwriting the last lines
        local idx=0
        for opt; do
            cursor_to $(($startrow + $idx))
            if [ $idx -eq $selected ]; then
                print_selected "$opt"
            else
                print_option "$opt"
            fi
            ((idx++))
        done

        # user key control
        case `key_input` in
            enter) break;;
            up)    ((selected--));
                   if [ $selected -lt 0 ]; then selected=$(($# - 1)); fi;;
            down)  ((selected++));
                   if [ $selected -ge $# ]; then selected=0; fi;;
        esac
    done

    # cursor position back to normal
    cursor_to $lastrow
    printf "\n"
    cursor_blink_on

    return $selected
}

# Echo with colors
colorecho() {
    color="$1"
    text="$2"
    echo -e "${color}${text}${NC}"
}

# Title / Heading
title() {
  clear
  text="$1"
  echo "---------------------------------------------------------------------"
  colorecho "$BLUE" "${text}"
  echo "---------------------------------------------------------------------"
}

################################################################
# Internet Connection Check

check_internet() {
    colorecho "$YELLOW" "Checking internet connection..."
    servers=("google.com" "1.1.1.1" "114.114.114.114") # ping Google, Cloudflare and China Mobile DNS (for China users)
    internet_available=false

    for server in "${servers[@]}"; do
        if ping -q -c 3 "$server" >/dev/null; then
            colorecho "$GREEN" "Internet is available via $server."
            internet_available=true
            break
        fi
    done

    if ! "$internet_available"; then
        colorecho "$RED" "Your system does not appear to have internet connection."
        colorecho "$YELLOW" "This installer requires internet connection. Do you want to try install anyway?"
        options=("Check Internet Again" "Try Install Anyway" "Exit Installer")
        select_option "${options[@]}"
        answer=$?
        if [ "$answer" = 0 ]; then
            check_internet
        elif [ "$answer" = 2 ]; then
            echo "Aborted. Exiting ..."
            exit 1
        fi
    fi
}

################################################################
# First Boot Setup

first_boot_setup() {

    colorecho "$GREEN" "Running First Boot Setup ..."

    # Check if the script is being run with root privileges
    if [[ $EUID -ne 0 ]]; then
        colorecho "$RED" "Error : First Boot Setup must be run as root"
        exit 1
    fi

    # Get rootfs partition from the current mount point "/"
    rootfs_partition=$(mount | grep "on / " | awk '{print $1}')

    title "Updating fstab ..."
    # Get boot partition using rootfs partition path
    rootfs_disk=$(echo "$rootfs_partition" | sed 's/[0-9]*$//')
    rootfs_disk="${rootfs_disk%p*}"
    boot_partition=$(fdisk -l "$rootfs_disk" | grep "$rootfs_disk" | awk 'NR==2{print $1}')

    # Check if the boot_partition is not empty
    if [ -z "$boot_partition" ]; then
        echo "Unable to determine boot partition on $rootfs_disk"
        exit 1
    fi

    # Add the line to /etc/fstab
    new_line="$boot_partition /boot vfat dmask=000,fmask=0111,user 0 0"

    # Check if the line already exists in /etc/fstab
    if grep -qF "/boot vfat dmask=000,fmask=0111,user 0 0" /etc/fstab; then
        echo "boot partition seems already configured in /etc/fstab to manage by system."
    else
        # Add the line to /etc/fstab
        echo "$new_line" >> /etc/fstab
        # Check if the addition was successful
        if [ $? -eq 0 ]; then
            cat /etc/fstab
            echo "Line added to /etc/fstab successfully"
        else
            echo "Error adding line to /etc/fstab"
        fi
    fi

    colorecho "$GREEN" "Resizing File System ..."
    growpart $rootfs_disk 2
    resize2fs $rootfs_partition

    # Allow wheel group in sudoers
    colorecho "$GREEN" "Allowing wheel group in sudoers ..."
    echo "%wheel ALL=(ALL) ALL" >> /etc/sudoers
    usermod -aG wheel root

    #Initialize the pacman keyring and populate the Arch Linux ARM package signing keys
    colorecho "$GREEN" "Setting up pacman ..."
    pacman-key --init
    pacman-key --populate archlinuxarm

    # Download and install arch-rock-config
    colorecho "$GREEN" "Installing Configuration Utility (arch-rock-config) ..."
    cd /usr/bin

    # Install arch-rock-config
    curl -LJO https://raw.githubusercontent.com/kwankiu/archlinux-installer-rock5/$branch/tools/arch-rock-config
    chmod +x arch-rock-config

    pacman -Sy sudo --noconfirm

    colorecho "$GREEN" "Adding 7ji archrepo ..."
    arch-rock-config add-7ji
    pacman -Syy

    ################################################################
    # User and Localization

    # Prompt user to enter a new username
    title "Create User Account"

    colorecho "$GREEN" "Removing default account ..."
    arch-rock-config user remove alarm

    title "Create User Account"
    read -p "Enter a new username (default=rock): " new_username

    # Check if the username is not empty
    if [ -z "$new_username" ]; then
        new_username="rock"
    fi

    arch-rock-config user add $new_username

    # Prompt user to change the root password
    title "Root account options"
    colorecho "$GREEN" "Do you want to change the root password?"
    options=("Turn off root account" "Change root password" "Do not change root password")
    select_option "${options[@]}"
    answer=$?

    if [ "$answer" = 1 ]; then
        colorecho "$GREEN" "Set new root password : "
        passwd
    elif [ "$answer" = 0 ]; then
        passwd -l root
    fi

    #title "Time Zone"
    #arch-rock-config "time" --installer
    #ntz=$(arch-rock-config time network-time-zone)

    colorecho "$GREEN" "Rebooting..."
    reboot
}

################################################################
# About this Installer

if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    colorecho "$BLUE" "Arch Rock Installer - Arch Linux Installer for Rock 5B / RK3588"
    echo "Usage: arch-rock-installer <optional_argument>"

    colorecho "$GREEN" "Options"
    echo "-h / --help : Usage and Infomation of this installer"
    echo "--skip-first-boot-setup : Skip first boot setup (use only if the corresponding setup has been done)"
    exit 1
fi

################################################################
# Installer Setup

title "Welcome to Arch Rock Installer"

# Check internet connection
check_internet

# Run first boot setup if not yet done
if [ ! -e "/usr/bin/arch-rock-config" ]; then 
    if [ ! "$1" = "--skip-first-boot-setup" ]; then
        first_boot_setup
    fi
fi

# Check if the script is being run with root privileges
if [[ $EUID -ne 0 ]]; then
    colorecho "$GREEN" "Start Installation ..."
else
    colorecho "$RED" "Error : Installer must be run as user"
    exit 1
fi

################################################################
# Install Linux Kernel

title "Install Linux Kernel"

    colorecho "$GREEN" "Installing Linux Kernel ..."
    oldkrlrel=$(uname -r)
    kernelpkg="linux-radxa-rkbsp5-git"
    yes y|sudo pacman -S --overwrite \* $kernelpkg $kernelpkg-headers

    if sudo pacman -Qs $kernelpkg > /dev/null ; then
        colorecho "$GREEN" "Removing Old Kernel Modules ..."
        sudo rm -rf /boot/dtbs/$oldkrlrel /lib/modules/$oldkrlrel
    else
        echo "Manual Confirm Installation" #debug
        sudo pacman -S --overwrite \* $kernelpkg $kernelpkg-headers
        if sudo pacman -Qs $kernelpkg > /dev/null ; then
            colorecho "$GREEN" "Removing Old Kernel Modules ..."
            sudo rm -rf /boot/dtbs/$oldkrlrel /lib/modules/$oldkrlrel
        else
            colorecho "$RED" "Error: Failed to Install Linux Kernel"
            colorecho "$RED" "Installation can not be continued, exiting ..."
            exit 1
        fi
    fi

    colorecho "$GREEN" "Installing DKMS Packages ..."
    arch-rock-config install "r8125-dkms-git" "8852bu-dkms-git" "8852be-dkms-git" 

    colorecho "$YELLOW" "Updating extlinux.conf ..."
    # apply new extlinux.conf
    sudo mv /boot/extlinux/extlinux.arch.template /boot/extlinux/extlinux.conf

    # Get rootfs partition from the current mount point "/"
    rootfs_partition=$(mount | grep "on / " | awk '{print $1}')

    # Find the UUIDs of the root partition
    root_uuid=$(blkid $rootfs_partition | awk '{print $2}' | tr -d '"')
    echo "Root partition UUID: $root_uuid"

    # Change UUID for extlinux.conf
    colorecho "$GREEN" "Updating UUID for extlinux.conf ..."
    sudo sed -i "s|UUID=\\*\\*CHANGEME\\*\\*|$root_uuid|" /boot/extlinux/extlinux.conf
    sudo sed -i "s|UUID=CHANGEME|$root_uuid|" /boot/extlinux/extlinux.conf

################################################################
# Install Mesa and GPU drivers

title "Install Mesa and GPU drivers"

    colorecho "$GREEN" "Installing Mesa ..."
    sudo pacman -S mesa-panfork-git --noconfirm

################################################################
# Install Video Acceleration

title "Install Video Acceleration"

    colorecho "$GREEN" "Installing Video Acceleration ..."
    sudo pacman -S mpp-git ffmpeg4.4-mpp ffmpeg-mpp --noconfirm

################################################################
# Post Installation

title "Post Installation"

colorecho "$GREEN" "Performing Full System Upgrade ..."
sudo pacman -Syyu --noconfirm

# The fix for some Bluetooth Modules (A8, AX210, etc.)
colorecho "$GREEN" "Applying Bluetooth Fix ..."
echo -e "blacklist pgdrv\nblacklist btusb\nblacklist btrtl\nblacklist btbcm\n#blacklist btintel" | sudo tee -a /etc/modprobe.d/blacklist.conf

# Network Manager, WiFi, Bluetooth
colorecho "$GREEN" "Installing network manager and bluetooth ..."
sudo pacman -S networkmanager iw bluez --noconfirm

colorecho "$GREEN" "Enabling network manager and bluetooth service ..."
sudo systemctl enable NetworkManager.service
sudo systemctl start NetworkManager.service
sudo systemctl enable bluetooth.service
sudo systemctl start bluetooth.service

################################################################
# Select desktop environment

title "Desktop Environment"
colorecho "$GREEN" "Select a desktop environment to install :"

options=("Gnome (X only)" "Gnome (Wayland Experimental)" "KDE Plasma" "Budgie")

# TO BE ADDED
# options+=("XFCE" "LXQt" "Cinnamon" "Cutefish" "Deepin" "MATE" "Sway")

options+=("Skip")

select_option "${options[@]}"
de_options=$?

################################################################
# Install desktop environment

title "Install desktop environment"

# Install desktop environment
if [ "$de_options" = 0 ]; then
    # Install Gnome
    colorecho "$GREEN" "Installing Gnome (X only)..."
    sudo pacman -S gnome --noconfirm
    GDM_CONFIG_FILE="/etc/gdm/custom.conf"
    if [ -f "$GDM_CONFIG_FILE" ]; then
        sudo sed -i 's/^#WaylandEnable/WaylandEnable=false/' "$GDM_CONFIG_FILE"
        echo "Wayland has been disabled for GDM."
    else
        echo "GDM configuration file ($GDM_CONFIG_FILE) not found."
    fi
    sudo systemctl enable gdm
elif [ "$de_options" = 1 ]; then
    # Install Gnome
    colorecho "$GREEN" "Installing Gnome (Wayland Experimental) ..."
    sudo pacman -S gnome-shell gdm gnome-keyring gnome-control-center gnome-terminal gnome-tweak-tool nautilus --noconfirm
    sudo systemctl enable gdm
elif [ "$de_options" = 2 ]; then
    # Install KDE Plasma
    colorecho "$GREEN" "Installing KDE Plasma ..."
    sudo pacman -S plasma-desktop sddm --noconfirm
    sudo systemctl enable sddm
elif [ "$de_options" = 3 ]; then
    # Install Budgie
    colorecho "$GREEN" "Installing Budgie ..."
    sudo pacman -S budgie-desktop gdm gnome-keyring gnome-control-center gnome-terminal gnome-tweak-tool nautilus --noconfirm
    sudo systemctl enable gdm
else
    colorecho "$YELLOW" "Skipping install desktop environment ..."
fi

################################################################
# Install additional packages

colorecho "$GREEN" "Starting additional packages installer ..."
arch-rock-config install --installer

################################################################
# Installation clean up

title "Installation Finished"

# Prompt user if they want to reboot
read -t 5 -p "Changes have been made. We will reboot your system in 5 seconds. Do you want to reboot now? (y/n): " reboot_choice

if [[ "$reboot_choice" == "n" || "$reboot_choice" == "N" ]]; then
    echo "You may manually reboot later to apply the changes."
    echo "To remove this installer, run sudo rm -rf /usr/bin/installer"
else
    colorecho "$GREEN" "Cleaning up installations ..."
    sudo rm -rf /usr/bin/installer
    colorecho "$GREEN" "Rebooting system ..."
    sudo reboot
fi

################################################################